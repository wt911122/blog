{"data":{"markdownRemark":{"html":"<p>Imagine for a moment the perfect website framework. One that produced really\nfast sites by default, that let you use the latest web tools and browser\nfeatures without complicated setup, and that helped your team stay coordinated\nas you develop, ship, and maintain sites.</p>\n<p>This framework would have to be:</p>\n<ul>\n<li><strong>universal</strong>, work for all types of sites from simple brocurewares to complex\nweb-apps.</li>\n<li><strong>simple</strong>, not requiring any setup to start using and with thoughtful APIs to\nextend the framework.</li>\n<li><strong>fast</strong>, doesn't lose customers to slow page loads. Takes advantage of\nHTTP/2, browser caching, service workers, inlined critical css, and code\nsplitting so your site always loads incredibly fastâ€”no matter what you build.</li>\n<li><strong>JavaScript-driven</strong>, the web is huge and intensely competitive. Sites that\nwin are fast and richly interactive. Your framework must make it trivial to\nuse advanced JavaScript.</li>\n<li><strong>team ready</strong>, use industry standard collaboration tools like NPM, Git, and\ncontinuous deployment, so your team is always on the same page and shipping\nnew features is easy.</li>\n<li><strong>modular</strong>, allows for cleanly separated features so fixing bugs and adding\nnew features is easy and complexity is contained.</li>\n<li><strong>internet scale</strong>, launch your site to millions without crashing your site\n(or your wallet).</li>\n<li><strong>secure</strong>, doesn't put your users' data at risk of hacking.</li>\n</ul>\n<p>I believe that Gatsby fulfills these requirements. After several years of\nworking on the project and seeing it used successfully by many people on a wide\nvariety of sites, I'm confident that Gatsby works.</p>\n<p>Since I open sourced Gatsby in 2015, it's collected over <strong>8000 stars</strong> on\nGitHub (by far the most stars on GitHub for a project of its type), been joined\nby <strong>122 contributors</strong>, and <strong>downloaded 130,000</strong> times!</p>\n<p>In mid-2016, I decided to\n<a href=\"https://www.bricolage.io/gatsby-open-source-work/\">work full-time on Gatsby</a>\nand started researching and prototyping ideas that are now coming together as\nGatsby 1.0.</p>\n<h2>What is Gatsby</h2>\n<p>Gatsby combines the fast performance of static websites with the powerful\nabstractions, excellent tools, and client capabilities of the web-app world.</p>\n<p>It is a general purpose data-centric web framework that is\n<a href=\"https://github.com/gatsbyjs/gatsby#sites-built-with-gatsby\">successfully being used for a wide variety of sites</a>\nincluding blogs, marketing sites, documentation sites, and e-commerce.</p>\n<p>It wraps three of the most popular web app tools into a cohesive website\nframework:</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/\">React</a> from Facebook for building UIs</li>\n<li><a href=\"https://webpack.js.org/\">Webpack</a> for bundling JavaScript and CSS</li>\n<li><a href=\"http://graphql.org/\">GraphQL</a> from Facebook for declarative data queries</li>\n</ul>\n<p>While designing Gatsby, I wanted a synthesis of two of my favorite developer\nexperiences. The simplicity of building sites with markdown and static site\ngenerators and the powerful hot-reloading environment of the React world.</p>\n<p><img src=\"https://camo.githubusercontent.com/0506699aaaae2f9772cc381b92f2aa5e14eba296/687474703a2f2f7a697070792e6766796361742e636f6d2f556c74696d6174655765656b6c7942617265626972646261742e676966\" alt=\"Gatsby development\nexperience\"></p>\n<p>When loading a page in a Gatsby site, browsers first load the page's pre-built\nHTML file and then load the minimum JavaScript needed to make that page\ninteractive.</p>\n<p>Because Gatsby sites are just static files, you're ensured a much more <em>carefree\ndeployment</em>. There are no <em>complicated databases</em> to install and maintain and\n<em>web-servers to scale</em> and protect against hacking.</p>\n<p>Serving static files ensures consistent <em>super fast load times</em>. Once your site\nis loaded, Gatsby automatically <em>pre-fetches</em> adjacent pages. This means\nnavigating around your site feels <em>instantaneous</em> as all the content and scripts\nfor the next page has been loaded already. Since you're reading this on a Gatsby\nsite, try clicking on a link in the header and then click back (note, this site\nis still being worked on as we approach 1.0). A bit faster than your current\nsite no? ðŸ˜œ</p>\n<h2>Apps vs sites</h2>\n<p>From nearly the beginning of the web, the idea of the web as an application\nplatform has competed with the idea of the web as a series of \"documents\".</p>\n<p>In recent years, the \"app\" paradigm has gained steam as dozens of JavaScript\nframeworks and other JavaScript tools have been released, exploring ideas and\ncompeting for mind-share.</p>\n<p>100s of millions of dollars have been invested by the largest companies in the\nworld in these JavaScript frameworks and the larger ecosystem of tools\nsurrounding them.</p>\n<p>The improvement has been dramatic and exhilarating. I can remember many things I\nstruggled for weeks to build in ~2010-2013 that took me days or even hours once\nI'd adopted React.</p>\n<p>React has taken over the web world and for good reason. Its three big ideas,\ncomposable components, lifecycle APIs, and one-way data flow dramatically\n<em>simplify</em> web UI development. Things that are really hard to build within other\nparadigms feel almost easy with React.</p>\n<h2>Time for a JavaScript web framework?</h2>\n<p>The internet runs on Open Source CMSsâ€”primarily WordPress and Drupal. I spent\nmost of college building Drupal websites and writing\n<a href=\"https://www.bricolage.io/first-beta-release-drupal-native-mailinglist-module/\">open-source Drupal modules</a>.\nMy first startup job was at <a href=\"https://pantheon.io\">Pantheon</a>â€”where I helped\n<a href=\"https://www.bricolage.io/new-beginnings/\">design and build developer tools</a> for\nteams building Drupal &#x26; WordPress sites.</p>\n<p>These open source CMSs are <em>extraordinary tools and have remarkably dynamic\necosystems</em>. They truly run the web. WordPress alone runs more than 25% of all\nwebsites on the internet!</p>\n<p>But still, the time seems ripe for a client-centric web framework.</p>\n<p>As more and more sites are expected to become app-like there's been a <em>rush to\nadd more JavaScript into our sites</em> resulting in an explosion of tool complexity\nresulting in, at times, poorly optimized sites that ship far too much JavaScript\nat the wrong times bogging down the site.</p>\n<p>But it doesn't need to be this way. We use web frameworks because they <em>embed\nsmart ideas about how to organize our code</em> so we're guided towards building\nfast sites that are simple to build and maintain.</p>\n<p>Gatsby aims to be a <em>modern web framework</em> that's designed with the assumption\nthat you need a rich client. Gatsby bakes in modern JavaScript compiler and\nbundling tools along with a full asset pipeline so you can just start writing\nyour website and <em>be confident things will work</em>.</p>\n<h2>Gatsby 1.0: Setting the foundation for a modern JavaScript website framework</h2>\n<p>I started working on the\n<a href=\"https://github.com/gatsbyjs/gatsby/tree/1.0\">1.0 branch</a> in August and after\nmonths of hard work, our first beta release is in sight.</p>\n<p>The changes for 1.0 can be organized into a few areas.</p>\n<h3>Add service worker and offline support</h3>\n<p>Service workers are perhaps the most exciting technology that's come to the web\nin the past several years. It makes possible (finally!) sophisticated client\ncaching plus true offline support. I've added excellent on-by-default support to\nGatsby for Service Workers and a great offline experience. If you're using\nChrome or Firefox, this site loads offline! <em>Service workers make your site much\nmore resilient against bad networks</em>. If someone loads your site on a train and\ngoes through a tunnel, you won't lose them as they'll still be able to keep\nclicking around.</p>\n<h3>Route-based code splitting</h3>\n<p>Many sites generate one JavaScript bundle for the <em>entire</em> site. Which means\nsomeone loading your frontpage loads far more code than is necessary.</p>\n<p>Gatsby 1.0 only loads the scripts necessary for the page you're on. As you\nnavigate around, Gatsby loads the JavaScript needed for each route.</p>\n<p>This means that one page with heavy imports:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> d3 <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3\"</span>\n<span class=\"token keyword\">import</span> threejs <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-threejs\"</span></code></pre></div>\n<p>...won't affect the performance of the rest of the site.</p>\n<p>This is particularly helpful for teams of people collaborating on a site with\npages with very different technical and business requirements. Different parts\nof the site can evolve independently of each other.</p>\n<p>One client I'm working with on Gatsby 1.0 (a stealth startup in San Francisco)\nis using Gatsby to build both their marketing site <em>and</em> SaaS app within the\n<em>same Gatsby codebase</em>.</p>\n<p>The marketing pages of their site are built using markdown and React components\nalong with a modern css-in-js library\n<a href=\"https://github.com/threepointone/glamor\">Glamor</a> for styling. The SaaS portion\nuses <a href=\"http://redux.js.org/\">Redux</a> to communicate with their Django API.</p>\n<p>The marketing portion of the site loads quickly with minimal JavaScript. When a\npotential customer goes to sign-up for the app, there's no <em>awkward jump from\nthe marketing website to the web app</em>â€”just a simple page change which seamlessly\nloads in the needed JavaScript. The <em>team is sharing components and styles\nacross the site</em> without stepping on each others shoes as they rapidly iterate\non features.</p>\n<h3>Plugin and Theme systems</h3>\n<p>WordPress &#x26; Jekyll are both great examples of open source communities with\nrobust theme &#x26; plugins ecosystems.</p>\n<p>Themes and plugins help accelerate building as you can build on what others have\ndone and help collaborate with others on basic building blocks</p>\n<p>Gatsby 1.0 will be adding plugin and theme support.</p>\n<p>The plugin system will let you hook into lifecycle APIs from events during the\nbootstrap and build processes and in the browser.</p>\n<p>There are a <a href=\"/docs/plugins/\">number of official Gatsby plugins</a> already\nbuiltâ€”all distributed as separate NPM packages. It'll be easy to create your own\nplugins for internal projects and as open source projects published on NPM.</p>\n<p>Plugins can:</p>\n<ul>\n<li>add support for webpack loaders such as Sass, Less</li>\n<li>add drop-in support for lightweight React-compatible frameworks\n<a href=\"https://preactjs.com/\">Preact</a> and <a href=\"https://infernojs.org/\">Inferno</a></li>\n<li>add a sitemap or RSS feed</li>\n<li>add <a href=\"/packages/gatsby-plugin-google-analytics/\">Google Analytics</a></li>\n<li>...and many more!</li>\n</ul>\n<p>Plugins also drive the new GraphQL data processing layer.</p>\n<p>The final pieces for theme support are coming soon. Gatsby's theme system will\nhave some unique properties. You'll be able to add multiple themes to a site. So\nyou could start a site with a \"blog\" theme and later add on a \"portfolio\" theme.\nThemes will also be able to <em>compose</em> other themes. So a large organization\ncould have a standard \"base\" theme and then individual departments could extend\nthe base theme to meet their specific requirements.</p>\n<p>Themes (like plugins) will be published on NPM. So soon, starting a new Gatsby\nblog will be as simple as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save gatsby-super-cool-theme\ngatsby build --theme gatsby-super-cool-theme</code></pre></div>\n<h3>GraphQL data layer</h3>\n<p>Currently data in Gatsby (like pretty much every static site generator) is\nprocessed then <em>pushed</em> into templates to be rendered into HTML. This is a\nsimple pattern and works great for many use cases. But when you start working on\nmore complex sites, you really start to miss the flexibility of building a\ndatabase-driven site. With a database, all your data is available to query\nagainst in any fashion you'd like. Whatever bits of data you need to assemble a\npage, you can <em>pull</em> in. You want to create author pages showing their bio and\nlast 5 posts? It's just a query away.</p>\n<p>I wanted this same flexibility for Gatsby. So for 1.0, I've built a new data\nprocessing layer which converts your static data files (or any other data\nsource) into a <em>GraphQL schema</em> which you can query against like a database.</p>\n<p>Every Gatsby page or page template can have a GraphQL query which tells Gatsby\nwhat data is required for that page. The data layer runs the GraphQL queries\nduring development and at build time and writes out a JSON file with the result\nof the query. This JSON file is then injected into the React component as props.</p>\n<p>Because we know at build-time what data is needed for every page, we can easily\npre-fetch page data meaning even very complex, data-heavy pages load almost\ninstantly.</p>\n<p>This pattern of <em>colocating</em> your queries next to your views is copied from the\n<a href=\"https://facebook.github.io/relay/\">Relay data framework from Facebook</a>.\nColocaton makes it easy to fully understand your views as everything necessary\nfor that view is fully described there.</p>\n<p>A simple example of how this works in practice.</p>\n<p>Say we had a markdown file that looked like:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: A sweet post\n<span class=\"token title important\">date: 2017-02-23\n<span class=\"token punctuation\">---</span></span>\n\nThis is my sweet blog post. <span class=\"token bold\"><span class=\"token punctuation\">**</span>Cool!<span class=\"token punctuation\">**</span></span></code></pre></div>\n<p>In our site, we would write a React component which acts as a template for all\nthe blog posts. Included with the component is an exported <code class=\"language-text\">pageQuery</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// A simple React component for rendering a blog page.</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>small<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>small<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            __html<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BlogPostTemplate\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n  query BlogPost($slug: String!) {\n    markdown(slug: { eq: $slug }) {\n      // Get the markdown body compiled to HTML.\n      html\n      frontmatter {\n        title\n        // Transform the date at build time!\n        date(formatString: \"MMM D, YYYY\")\n      }\n    }\n  }\n`</span></span></code></pre></div>\n<p>All data parsing and processing is plugin-driven. So in time, any imaginable\ndata format and source and potential way of processing its data will be an npm\ninstall away.</p>\n<p>So far I've focused on building out the markdown ecosystem. So there are plugins\nto <a href=\"/packages/gatsby-parser-remark/\">parse markdown</a> and process it in a variety\nof ways (including\n<a href=\"/packages/gatsby-typegen-remark-prismjs/\">adding syntax highlighting with PrismJS</a>\nand\n<a href=\"/packages/gatsby-typegen-remark-images/\">resizing images referenced in markdown files</a>\nso they're mobile ready). I've also added parsers for\n<a href=\"/packages/gatsby-parser-yaml/\">YAML</a>, <a href=\"/packages/gatsby-parser-json/\">JSON</a>,\nand <a href=\"/packages/gatsby-parser-sharp/\">images</a>.</p>\n<p>These plugins are easy to write (somewhat similar to webpack loaders) so I\nexpect to see the list of plugins grow rapidly.</p>\n<p>The GraphQL layer can also connect to external data sources like databases,\nAPIs, or 3rd party services e.g. the various hosted CMSs such as\n<a href=\"https://www.contentful.com/\">Contentful</a> and\n<a href=\"https://www.datocms.com/\">DataCMS</a>.</p>\n<h2>Getting started with Gatsby 1.0</h2>\n<p>Gatsby 1.0 is still in alpha so I don't recommend it yet for casual use. If you\ndon't mind some growth pains and diving it to fix bugs and add features, Gatsby\n1.0 is mostly feature-complete now and can be used to build real sites.</p>\n<p>The first beta will be released in the coming weeks along with more\ndocumentation and a getting started tutorial. Subscribe to the\n<a href=\"https://github.com/gatsbyjs/gatsby/issues/419\">1.0 meta issue</a> on GitHub to get\nupdates.</p>\n<p>This has been a super fun project to work on. I'm really interested to hear your\nreactions and what kind of problems you face that you think Gatsby will help\nwith.</p>\n<p>If you're interested in contributing, please join the\n<a href=\"https://gatsby.dev/discord\">Gatsby Discord</a>, check out the\n<a href=\"https://github.com/gatsbyjs/gatsby/issues\">issues</a>, and help bikeshed on names\nand APIs and other ideas.</p>","frontmatter":{"date":"February 23, 2017","path":"/hello-world","title":"What's coming in Gatsby 1.0"}}},"pageContext":{}}