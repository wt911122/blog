{"data":{"markdownRemark":{"html":"<p>webpack已经完全融入到了前端日常开发的方方面面，可以说现在的前端项目基本离不开webpack体系，因此了解webpack的实现原理对于日常开发会有很大的帮助。webpack已经不仅仅限于一款用于把node_modules中不同模块的代码与工程项目代码打包成块的工具，其意义在于整合编译项目中的不同资源，按需加载，它强大的可配置性赋予了项目极强的可延展性。</p>\n<p>阅读webpack源码不可能像<code class=\"language-text\">npm i webpack</code>一样简单，所以我觉得可以遵从一个很简单的逻辑主线来阅读，这个也是官方文档中所介绍的webpack运行的一般顺序：</p>\n<p>入口 -> 路径解析 -> 单个文件 loaders -> chunk 操作 。</p>\n<p>从这条主线出发，可以提出几个问题：\n1、webpack是如何从入口文件出发，收集到工程下所有项目文件的？\n2、loader的编译阶段发生在什么时候？发生了什么？\n3、打包编译出的代码和配置文件的映射关系是什么？</p>\n<p>但当你打开源码之后，你会发现webpack的所有主流程类都是继承自Tapable，一个基于事件钩子插件库，该库提供了多种事件触发类型的钩子。所以在读源码之前，必须先简要了解下，What is this Tapable Capable~</p>\n<p>Tapable的构造方法：</p>\n<ul>\n<li>xxxHook(args: Array):Hook\nargs代表了一连串的变量名，返回了一个Hook实例，</li>\n</ul>\n<p>Hook实例的通用方法：</p>\n<ul>\n<li>tap(options: string|object, fn: Function)\n向Hook中的taps数组中添加当前回调fn，添加方式取决于当前Hook的类型</li>\n<li>call(...args)\n同步钩子调用，args为xxxHook构造时，编译出的函数中传入的参数，这串参数会经历所有实例上带有的钩子。</li>\n<li>callAsync(...args, callback)\n异步钩子调用，args为xxxHook构造时，编译出的函数中传入的参数，这串参数会经历所有实例上带有的钩子。</li>\n</ul>\n<p>Tapable提供了同步及异步的钩子，同步的钩子包括</p>\n<ul>\n<li>SyncHook（同步顺序执行的钩子，钩子间的结果互不影响，出错时跳出）</li>\n<li>SyncWaterfallHook（同步顺序执行，下一个钩子的接收参数是前一个钩子的返回，而非call时传入初始对象，出错时跳出）</li>\n<li>SyncBailHook（同步顺序执行，前一个钩子出错或者没有返回，也就是调用了onError，之后的均不会被执行）</li>\n<li>SyncLoopHook（同步顺序执行，如果一个钩子出错或者没有返回，就终止循环）</li>\n</ul>\n<p>异步钩子包括</p>\n<ul>\n<li>AsyncParallelHook （异步同时执行所有钩子，在每次运行回调时检查所有钩子是否执行完，执行完则抛出整体的回调）</li>\n<li>AsyncParallelBailHook（异步同时执行所有钩子，在每次运行回调时检查所有钩子是否执行完，且检查执行是否有结果，没有结果则终止执行）</li>\n<li>AsyncSeriesHook（异步顺序执行所有钩子，将所有钩子组成回调串，出错时跳出）</li>\n<li>AsyncSeriesBailHook（异步顺序执行所有钩子，将所有钩子组成回调串，其中有个钩子没有返回值或者出错，则直接跳出）</li>\n<li>AsyncSeriesWaterfallHook（异步顺序执行所有钩子，将所有钩子组成回调串，其中有个钩子没有返回值或者出错，则直接跳出，下一个钩子的接收参数是前一个钩子的返回，而非call时传入初始对象）x</li>\n<li>AsyncSeriesLoopHook（异步顺序循环执行所有的钩子，出错或其中有个钩子的返回结果为undefined则跳出）</li>\n</ul>\n<p>另外还提供HookMap工具，这个返回相当于一个 Map&#x3C;key, value<xxxxHook>></p>\n<ul>\n<li>for(key).tap()</li>\n<li>for(key).call()</li>\n<li>for(key).callAsync()</li>\n</ul>\n<p>Compiler所继承的Tapable还有一些实现方法，包括Apply和Plugin，这两个方法是旧版webpack在Compiler上注册插件的方式。</p>\n<p>还有拦截器 Intercept，Intercept会应用于绑定在该Hook实例上所有的钩子运行之前。其具有一个需要实现的属性函数register，register把钩子tap时整理好的<code class=\"language-text\">options:{name:tap(name, fn), type: sync|async, context:Hook自带的运行环境, fn: tapFn}</code>带入然后返回处理好的options，webpack中多用作<strong>追踪</strong>和<strong>计算打包进程</strong></p>\n<p>以上对于Tapable的了解应该是够用了。另外还有一些概念包括Plugin，Webpack中的Plugin是什么？它必须实现一个apply方法，该方法传入一个compiler对象，这个对象就好比构建compilation的架子，compilation相当于依赖图，Compiler继承了Tapable并且暴露了自己所有的生命周期，因此Plugin要做的就是在该compiler对象的生命周期中挂载自己的所需执行的方法，Plugin可以有自己的状态，并且在compiler对象处于不同阶段时改变自己的状态。举个里面简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> JsonParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./JsonParser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> JsonGenerator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./JsonGenerator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JsonModulesPlugin</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//  在 compilation 阶段注册 JsonModulesPlugin</span>\n        <span class=\"token comment\">//  compilation 钩子具有两个参数</span>\n        <span class=\"token comment\">//  /** @type {SyncHook&lt;Compilation, CompilationParams>} */</span>\n        <span class=\"token comment\">//  compilation: new SyncHook([\"compilation\", \"params\"]),</span>\n\n\t\tcompiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>compilation<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token string\">\"JsonModulesPlugin\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> normalModuleFactory <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// normalModuleFactory 是 NormalModuleFactory 的实例，用于把不同的文件读入，通过loaders转化成别的形式用于加入chunk中</span>\n                <span class=\"token comment\">// 这里是在 normalModuleFactory 构建解析器的阶段注入json的解析器</span>\n                normalModuleFactory<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>createParser\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JsonModulesPlugin\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 这里是在 normalModuleFactory 构建生成器的阶段注入json的生成器</span>\n\t\t\t\tnormalModuleFactory<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>createGenerator\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JsonModulesPlugin\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> JsonModulesPlugin<span class=\"token punctuation\">;</span></code></pre></div>\n<p>下面可以着手来dive into webpack源码了。</p>\n<p>首先来回答第一个问题，webpack在运行时，我们通常会执行一个函数<code class=\"language-text\">webpack(options)</code>，在就是读入webpack.config.js中的配置，然后返回一个<code class=\"language-text\">Compile</code>对象，然后运行这个对象的run()。run()在准备好一些文件缓存、计时器之类的之后，执行compile方法开始编译，complile方法的目的在于构建Compilation对象，该对象贯穿于整个打包周期中。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 构建新的 Compulation 所需的参数</span>\n\t\t<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCompilationParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>beforeCompile<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 这里从webpack.config.js中读取了配置，并为 compilation 装配了用于解析 dependancies 所需要的 compilation.dependencyFactories 下</span>\n\t\t\t<span class=\"token keyword\">const</span> compilation <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCompilation</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 完成了所有的准备，此时开始 Compilation 阶段，就是真正的从入口处开始打包</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 以下可以先不关心，不在第一个问题的范围之内</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tcompilation<span class=\"token punctuation\">.</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tcompilation<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterCompile<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compilation从入口，也就是我们通常写的webpack.config.js的entry属性开始读取文件，在读取文件内容之前，webpack必须确认文件的存在，如果不存在，就会出现webpack的日常报错 Module not found，为啥是Module node found呢？因为在webpack中，Module的概念相当于就是单个引用文件，接下来回到正题。</p>\n<p>这里就会使用到了<a href=\"https://github.com/webpack/enhanced-resolve\">enhance-resolver</a>这个库，这个库会去寻找工程中的依赖位置，可能是项目目录下，也可能是node_modules中，也可能是alias中等，然后将文件的stats信息，绝对路径，以及这次解析的独立ID（重复的路径可以复用）。举个常见的栗子，单入口的SingleEntryPlugin中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n        <span class=\"token comment\">// 这里接上一个代码块的 this.hooks.make.callAsync 调用</span>\n\t\tcompiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">.</span><span class=\"token function\">tapAsync</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token string\">\"SingleEntryPlugin\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> entry<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> context <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> SingleEntryPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">createDependency</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 此处启动 compilation 的主流程， addEntry 中会开始构建 Module 的 主流程</span>\n\t\t\t\tcompilation<span class=\"token punctuation\">.</span><span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> dep<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>compilation的主流程是一个不断递归的过程，首先从entry出发，通过ModuleFactory创建一个Module(moduleFactory.create)，ModuleFactory的类型是在Resolve阶段就决定好了的。举个栗子，比如<a href=\"https://github.com/webpack/webpack/blob/master/lib/NormalModuleFactory.js//#L369\">NormalModuleFactory</a></p>\n<p>CODE 1</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// addEntry 会调用到 ModuleFactory.create 方法创建Module</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token operator\">...</span>\n    <span class=\"token comment\">// Resolve前的准备，只是把</span>\n        <span class=\"token comment\">//   {</span>\n        <span class=\"token comment\">//     contextInfo,</span>\n        <span class=\"token comment\">//     resolveOptions,</span>\n        <span class=\"token comment\">//     context,</span>\n        <span class=\"token comment\">//     request,</span>\n        <span class=\"token comment\">//     dependencies</span>\n        <span class=\"token comment\">//   }</span>\n        <span class=\"token comment\">//   做了一些处理返回到回调的result当中去</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>beforeResolve<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>\n            contextInfo<span class=\"token punctuation\">,</span>\n            resolveOptions<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">,</span>\n            request<span class=\"token punctuation\">,</span>\n            dependencies\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 这个hook执行之后，返回的一个factory(data, callback)函数，其执行顺序与tap进的顺序相反（SyncWaterfallHook）</span>\n            <span class=\"token comment\">// 用于构建并执行factory</span>\n            <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>factory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 执行返回的 factory(data, callback)函数</span>\n            <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 对这次的解析结果做了缓存，缓存的是module与dependency的对应关系</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cachePredicate</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> d <span class=\"token keyword\">of</span> dependencies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        dependencyCache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NormalModuleFactory\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 这里就是上面 this.hooks.factory.call(null) 真正执行的函数，result 对应了上面 传入的处理过的 result</span>\n\n        <span class=\"token comment\">// 这个hook执行与之前的factory使用了同样的构建方式，返回的一个resolver(data, callback)函数，其执行顺序与tap进的顺序相反（SyncWaterfallHook）</span>\n        <span class=\"token comment\">// 用于构建 resolver 函数</span>\n        <span class=\"token keyword\">let</span> resolver <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">resolver</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>resolver<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 执行 resolver</span>\n        <span class=\"token comment\">// 这步的作用主要是收集可以解析这个文件所需loaders，及配置这些loader</span>\n        <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> data<span class=\"token punctuation\">.</span>source <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 这有点像 koa 的洋葱圈 先执行完 afterResolve 之后又会跳回 factory 的回调之中</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterResolve<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">let</span> createdModule <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">createModule</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>createdModule<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty dependency (no request)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    createdModule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NormalModule</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                createdModule <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>createdModule<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 现在构建这个 Module 的方法准备好了，回到工厂可以准备出厂了</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Module创建后就会被构建，CODE 1的回调回到 compilation 的 _addModuleChain 函数，在做了一些处理后执行 buildModule 主方法，从而开始构建这个module，module在含义上其实就是工程内打包的不同文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">buildModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">,</span> thisCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token comment\">// 绑定 sourcemap, progress 到该module的生命周期</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">buildModule</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// module构建住方法 这里可以代入 NormalModule 来看</span>\n        module<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resolverFactory<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">.</span>resolveOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputFileSystem<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">...</span>\n\n                <span class=\"token keyword\">const</span> originalMap <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">map<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 依赖的对应表排序</span>\n\t\t\t\tmodule<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">const</span> cmp <span class=\"token operator\">=</span> <span class=\"token function\">compareLocations</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cmp<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> originalMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> originalMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<p>NormalModule在运行build方法的时候会先跑一遍loader（这是在之前loader resolver的时候就绑定好的），</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">doBuild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> loaderContext <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createLoaderContext</span><span class=\"token punctuation\">(</span>\n\t\t\tresolver<span class=\"token punctuation\">,</span>\n\t\t\toptions<span class=\"token punctuation\">,</span>\n\t\t\tcompilation<span class=\"token punctuation\">,</span>\n\t\t\tfs\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// loader-runner https://github.com/webpack/loader-runner/blob/master/lib/LoaderRunner.js#L251</span>\n        <span class=\"token comment\">// 这里回答了第二个问题</span>\n\t\t<span class=\"token function\">runLoaders</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\tresource<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resource<span class=\"token punctuation\">,</span>\n\t\t\t\tloaders<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loaders<span class=\"token punctuation\">,</span>\n\t\t\t\tcontext<span class=\"token punctuation\">:</span> loaderContext<span class=\"token punctuation\">,</span>\n\t\t\t\treadResource<span class=\"token punctuation\">:</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// err: 是否出错</span>\n                <span class=\"token comment\">// result.result: Buffer | String</span>\n                <span class=\"token comment\">// The result</span>\n\n                <span class=\"token comment\">// result.resourceBuffer: Buffer</span>\n                <span class=\"token comment\">// 源文件读入后生成的 Buffer (useful for SourceMaps)</span>\n\n                <span class=\"token comment\">// result.cacheable: Bool</span>\n                <span class=\"token comment\">// 这个可以缓存还是需要执行</span>\n\n                <span class=\"token comment\">// result.fileDependencies: String[]</span>\n                <span class=\"token comment\">// 这个结果是由哪些文件组成的</span>\n\n                <span class=\"token comment\">// result.contextDependencies: String[]</span>\n                <span class=\"token comment\">// 这个结果是由哪些文件目录组成的</span>\n                <span class=\"token operator\">...</span>\n                <span class=\"token comment\">// 把结果存到当前 Module 当中</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_source <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSource</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>binary <span class=\"token operator\">?</span> <span class=\"token function\">asBuffer</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">asString</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tresourceBuffer<span class=\"token punctuation\">,</span>\n\t\t\t\t\tsourceMap\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_ast <span class=\"token operator\">=</span>\n\t\t\t\t\t<span class=\"token keyword\">typeof</span> extraInfo <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t\t\textraInfo <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t\t\textraInfo<span class=\"token punctuation\">.</span>webpackAST <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span>\n\t\t\t\t\t\t<span class=\"token operator\">?</span> extraInfo<span class=\"token punctuation\">.</span>webpackAST\n\t\t\t\t\t\t<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后将处理完的结果放入parser中解析。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\">// 这里的build 对应了向前第二个代码块的 module.build(</span>\n    <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token comment\">// doBuild 对应了上一个代码块</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doBuild</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token operator\">...</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 解析该文件内容</span>\n\t\t\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_ast <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_source<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tcurrent<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tmodule<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tcompilation<span class=\"token punctuation\">:</span> compilation<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\toptions<span class=\"token punctuation\">:</span> options\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token function\">handleParseError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token function\">handleParseResult</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// 返回</span>\n\t\t\t\t\t<span class=\"token function\">handleParseResult</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">handleParseError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在解析的过程中把文件中用到的import之类的信息解析出来，把引入的文件找到并匹配对应的Dependency放入Module当中</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Parser.js</span>\n    <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">...</span>\n        ast <span class=\"token operator\">=</span> Parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            sourceType<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sourceType<span class=\"token punctuation\">,</span>\n            onComment<span class=\"token punctuation\">:</span> comments\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token operator\">...</span>\n        <span class=\"token comment\">// 解析整个文件的声明句，解析出一个通过钩子抛出，钩子将其加入到 该 Module 的 dependancis 当中</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walkStatements</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>解析完之后回到 Compilation，根据这次的解析结果决定是否要继续继续解析该 Module 的依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    moduleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>\n            contextInfo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                issuer<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                compiler<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span>name\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">,</span>\n            dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>dependency<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n\n            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">afterBuild</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentProfile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> afterBuilding <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    currentProfile<span class=\"token punctuation\">.</span>building <span class=\"token operator\">=</span> afterBuilding <span class=\"token operator\">-</span> afterFactory<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 如果当前加入的 Module 中具有依赖，则继续解析这个 Module 中的所有依赖，也就是回到了单个 Module 的resolve阶段，</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addModuleResult<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processModuleDependencies</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token operator\">...</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addModuleResult<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildModule</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">...</span>\n\n                    <span class=\"token function\">afterBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token operator\">...</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这基本上回答了第一个问题，在所有的 Module 解析完毕之后，this.hooks.make走到了回调函数。</p>\n<p>接下来，来回答第三个问题，第三个问题涉及到chunk，还是这段 Compile 的 compile 函数，现在运行到seal阶段</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 这里所有的 module 都生成好了，执行了 finishModules 钩子</span>\n                <span class=\"token comment\">// webpack本身这里重新整理了一些exports，比如把 export * from '.../'</span>\n                <span class=\"token comment\">//另外还有 webAssembly module 之类的不在本篇讨论范围之内，有兴趣可以自己研究</span>\n\t\t\t\tcompilation<span class=\"token punctuation\">.</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 这边进入打成 chunk 的主流程</span>\n\t\t\t\t\tcompilation<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterCompile<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面来看seal方法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 这里 webpack 检查了一下所有 module 的绝对路径是否存在只是大小写区分。若存在会抛出 CaseSensitiveModulesWarning</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// 这里的写法相当于</span>\n            <span class=\"token comment\">/**\n             * if(this.hooks.optimizeDependenciesBasic.call(this.modules))\n             *   if(this.hooks.optimizeDependencies.call(this.modules))\n             *      if(this.hooks.optimizeDependenciesAdvanced.call(this.modules)) { }\n             **/</span>\n            <span class=\"token comment\">// 这些都是 SyncBailHook</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">optimizeDependenciesBasic</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token comment\">// production mode下会启用的 FlagDependencyUsagePlugin SideEffectsFlagPlugin 在这里调用</span>\n            <span class=\"token comment\">// 如果要disable这个plugin可以在 optimizeDependenciesBasic 返回一个非undefined的值</span>\n            <span class=\"token comment\">// FlagDependencyUsagePlugin 应该是能够将 module 中 exports 的有效部分标记出来</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">optimizeDependencies</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">optimizeDependenciesAdvanced</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">/* empty */</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">afterOptimizeDependencies</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">beforeChunks</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 到此为止开始真正的合并chunk的过程</span>\n        <span class=\"token comment\">// 按 webpack.config.js 中设置的 entry 打 chunk</span>\n        <span class=\"token comment\">// 并加入到 chunkGroups</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> preparedEntrypoint <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_preparedEntrypoints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> module <span class=\"token operator\">=</span> preparedEntrypoint<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> preparedEntrypoint<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果有一致的 chunk 名则复用</span>\n\t\t\t<span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addChunk</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> entrypoint <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entrypoint</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tentrypoint<span class=\"token punctuation\">.</span><span class=\"token function\">setRuntimeChunk</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tentrypoint<span class=\"token punctuation\">.</span><span class=\"token function\">addOrigin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> preparedEntrypoint<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>namedChunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> entrypoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entrypoints<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> entrypoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>entrypoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// entrypoint 和 chunk 建立多对多的关系</span>\n            GraphHelpers<span class=\"token punctuation\">.</span><span class=\"token function\">connectChunkGroupAndChunk</span><span class=\"token punctuation\">(</span>entrypoint<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// chunk 和 module 建立多对多的关系</span>\n\t\t\tGraphHelpers<span class=\"token punctuation\">.</span><span class=\"token function\">connectChunkAndModule</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tchunk<span class=\"token punctuation\">.</span>entryModule <span class=\"token operator\">=</span> module<span class=\"token punctuation\">;</span>\n\t\t\tchunk<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">assignDepth</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 生成 chunk图，</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processDependenciesBlocksForChunkGroups</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里可以来研究下生成 chunk 图的方法。chunk图是个什么东西呢？chunk图其实建立在module图上，module图就是表示module之间的依赖关系，可能是同步依赖，也可能是异步依赖，这样在异步依赖的时候需对chunk分组来描述chunk之间的依赖关系，因此算法先生成了简单的module图，然后在这基础上做了两步chunk图的计算，下面简单分析下chunk图的生成方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">processDependenciesBlocksForChunkGroups</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputChunkGroups</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> chunkDependencies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> allCreatedChunkGroups <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> blockInfoMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存放 module 图</span>\n\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">iteratorDependency</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// We skip Dependencies without Reference</span>\n\t\t\t<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDependencyReference</span><span class=\"token punctuation\">(</span>currentModule<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// We skip Dependencies without Module pointer</span>\n\t\t\t<span class=\"token keyword\">const</span> refModule <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>refModule<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// We skip weak Dependencies</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>weak<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tblockInfoModules<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>refModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">iteratorBlockPrepare</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tblockInfoBlocks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tblockQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/** @type {Module} */</span>\n\t\t<span class=\"token keyword\">let</span> currentModule<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/** @type {DependenciesBlock} */</span>\n\t\t<span class=\"token keyword\">let</span> block<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/** @type {DependenciesBlock[]} */</span>\n\t\t<span class=\"token keyword\">let</span> blockQueue<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/** @type {Set&lt;Module>} */</span>\n\t\t<span class=\"token keyword\">let</span> blockInfoModules<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存放同步加载的module</span>\n\t\t<span class=\"token comment\">/** @type {AsyncDependenciesBlock[]} */</span>\n\t\t<span class=\"token keyword\">let</span> blockInfoBlocks<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存放异步加载的module</span>\n\n\t\t<span class=\"token comment\">// 整个是为了生成简单的 mudule 图</span>\n\t\t<span class=\"token comment\">/**\n\t\t * 每个 module 都有两个分支，\n\t\t * blocks: 存异步 module，\n\t\t * modules: 存同步 module,\n\t\t *\n\t\t * blockInfoMap 用 module 做键值，构建module的属性依赖结构\n\t\t * 类似这样\n\t\t *                   A\n\t\t *                 /  \\\n\t\t *\tmodules -> [B, C] [D]  &lt;- blocks(异步)\n\t\t *             /      /\n\t\t * modules-> [E]    [F]  &lt;- modules\n\t\t *\n\t\t **/</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> module <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tblockQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tcurrentModule <span class=\"token operator\">=</span> module<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>blockQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tblock <span class=\"token operator\">=</span> blockQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tblockInfoModules <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tblockInfoBlocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>variables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">iterationBlockVariable</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>variables<span class=\"token punctuation\">,</span> iteratorDependency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// 普通模块加入 blockInfoModules 中</span>\n\t\t\t\t\t<span class=\"token function\">iterationOfArrayCallback</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">,</span> iteratorDependency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>blocks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// 异步模块加入 blockInfoBlocks 中</span>\n\t\t\t\t\t<span class=\"token function\">iterationOfArrayCallback</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>blocks<span class=\"token punctuation\">,</span> iteratorBlockPrepare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">const</span> blockInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tmodules<span class=\"token punctuation\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>blockInfoModules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tblocks<span class=\"token punctuation\">:</span> blockInfoBlocks\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 当前 module 加入 module图中</span>\n\t\t\t\tblockInfoMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> blockInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// PART1 开始分割简单的 chunk 图</span>\n\t\t<span class=\"token comment\">/** @type {Map&lt;ChunkGroup, { index: number, index2: number }>} */</span>\n\n\t\t<span class=\"token keyword\">const</span> chunkGroupCounters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunkGroup <span class=\"token keyword\">of</span> inputChunkGroups<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tchunkGroupCounters<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>chunkGroup<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index2<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">let</span> nextFreeModuleIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> nextFreeModuleIndex2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/** @type {Map&lt;DependenciesBlock, ChunkGroup>} */</span>\n\t\t<span class=\"token keyword\">const</span> blockChunkGroups <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/** @type {Set&lt;DependenciesBlock>} */</span>\n\t\t<span class=\"token keyword\">const</span> blocksWithNestedBlocks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_AND_ENTER_MODULE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token constant\">ENTER_MODULE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token constant\">PROCESS_BLOCK</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token constant\">LEAVE_MODULE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/**\n\t\t * @typedef {Object} QueueItem\n\t\t * @property {number} action\n\t\t * @property {DependenciesBlock} block\n\t\t * @property {Module} module\n\t\t * @property {Chunk} chunk\n\t\t * @property {ChunkGroup} chunkGroup\n\t\t */</span>\n\n\t\t<span class=\"token comment\">/**\n\t\t * @param {ChunkGroup} chunkGroup chunk group\n\t\t * @returns {QueueItem} queue item\n\t\t */</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">chunkGroupToQueueItem</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">chunkGroup</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\taction<span class=\"token punctuation\">:</span> <span class=\"token constant\">ENTER_MODULE</span><span class=\"token punctuation\">,</span>\n\t\t\tblock<span class=\"token punctuation\">:</span> chunkGroup<span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>entryModule<span class=\"token punctuation\">,</span>\n\t\t\tmodule<span class=\"token punctuation\">:</span> chunkGroup<span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>entryModule<span class=\"token punctuation\">,</span>\n\t\t\tchunk<span class=\"token punctuation\">:</span> chunkGroup<span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\tchunkGroup\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Start with the provided modules/chunks</span>\n\t\t<span class=\"token comment\">/** @type {QueueItem[]} */</span>\n\t\t<span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> inputChunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>chunkGroupToQueueItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/** @type {QueueItem[]} */</span>\n\t\t<span class=\"token keyword\">let</span> queueDelayed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/** @type {Module} */</span>\n\t\t<span class=\"token keyword\">let</span> module<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/** @type {Chunk} */</span>\n\t\t<span class=\"token keyword\">let</span> chunk<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/** @type {ChunkGroup} */</span>\n\t\t<span class=\"token keyword\">let</span> chunkGroup<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// For each async Block in graph</span>\n\t\t<span class=\"token comment\">/**\n\t\t * @param {AsyncDependenciesBlock} b iterating over each Async DepBlock\n\t\t * @returns {void}\n\t\t */</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">iteratorBlock</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 1. We create a chunk for this Block</span>\n\t\t\t<span class=\"token comment\">// but only once (blockChunkGroups map)</span>\n\t\t\t<span class=\"token comment\">// 如果 blockChunkGroups 中不存在这个module所属的chunk，为这个异步的 module 创建一个</span>\n\t\t\t<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> blockChunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>namedChunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>chunkName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">isInitial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncDependencyToInitialChunkError</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>chunkName<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tc <span class=\"token operator\">=</span> chunkGroup<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addChunkInGroup</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\tb<span class=\"token punctuation\">.</span>groupOptions <span class=\"token operator\">||</span> b<span class=\"token punctuation\">.</span>chunkName<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tmodule<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tb<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tb<span class=\"token punctuation\">.</span>request\n\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tchunkGroupCounters<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index2<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tblockChunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tallCreatedChunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// TODO webpack 5 remove addOptions check</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>addOptions<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">addOptions</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>groupOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">addOrigin</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// 2. We store the Block+Chunk mapping as dependency for the chunk</span>\n\t\t\t<span class=\"token comment\">// chunkDependencies 就是这个 chunkGroup 所依赖的其他chunk</span>\n\t\t\t<span class=\"token keyword\">let</span> deps <span class=\"token operator\">=</span> chunkDependencies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>chunkGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>deps<span class=\"token punctuation\">)</span> chunkDependencies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>chunkGroup<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdeps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\tblock<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n\t\t\t\tchunkGroup<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span>\n\t\t\t\tcouldBeFiltered<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 3. We enqueue the DependenciesBlock for traversal</span>\n\t\t\t<span class=\"token comment\">// 异步的模块放到同步模块走完再循环</span>\n\t\t\tqueueDelayed<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\taction<span class=\"token punctuation\">:</span> <span class=\"token constant\">PROCESS_BLOCK</span><span class=\"token punctuation\">,</span>\n\t\t\t\tblock<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n\t\t\t\tmodule<span class=\"token punctuation\">:</span> module<span class=\"token punctuation\">,</span>\n\t\t\t\tchunk<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\tchunkGroup<span class=\"token punctuation\">:</span> c\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Iterative traversal of the Module graph</span>\n\t\t<span class=\"token comment\">// Recursive would be simpler to write but could result in Stack Overflows</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 递归变循环的方法是构造一个栈来代替调用栈</span>\n\t\t\t\t<span class=\"token keyword\">const</span> queueItem <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmodule <span class=\"token operator\">=</span> queueItem<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">;</span>\n\t\t\t\tblock <span class=\"token operator\">=</span> queueItem<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">;</span>\n\t\t\t\tchunk <span class=\"token operator\">=</span> queueItem<span class=\"token punctuation\">.</span>chunk<span class=\"token punctuation\">;</span>\n\t\t\t\tchunkGroup <span class=\"token operator\">=</span> queueItem<span class=\"token punctuation\">.</span>chunkGroup<span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>queueItem<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">ADD_AND_ENTER_MODULE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token comment\">// We connect Module and Chunk when not already done</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\tmodule<span class=\"token punctuation\">.</span><span class=\"token function\">addChunk</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// already connected, skip it</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token comment\">// fallthrough</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">ENTER_MODULE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 从 entry 进入</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunkGroup <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// 入栈的时候带上 index</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> chunkGroup<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleIndex</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\tchunkGroup<span class=\"token punctuation\">.</span><span class=\"token function\">setModuleIndex</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\t\t\t\tmodule<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\tchunkGroupCounters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>chunkGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">++</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\tmodule<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> nextFreeModuleIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 将退出队列的操作推入栈中</span>\n\t\t\t\t\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\taction<span class=\"token punctuation\">:</span> <span class=\"token constant\">LEAVE_MODULE</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tblock<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tmodule<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tchunk<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tchunkGroup\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token comment\">// 直接进入对子module的遍历</span>\n\t\t\t\t\t<span class=\"token comment\">// fallthrough</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">PROCESS_BLOCK</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token comment\">// get prepared block info</span>\n\t\t\t\t\t\t<span class=\"token keyword\">const</span> blockInfo <span class=\"token operator\">=</span> blockInfoMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t<span class=\"token comment\">// Traverse all referenced modules</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 处理所有的同步module引用</span>\n\t\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> blockInfo<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> refModule <span class=\"token operator\">=</span> blockInfo<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">containsModule</span><span class=\"token punctuation\">(</span>refModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\t<span class=\"token comment\">// skip early if already connected</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// enqueue the add and enter to enter in the correct order</span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// this is relevant with circular dependencies</span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// 把所有的同步依赖 module 压入栈中处理</span>\n\t\t\t\t\t\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\taction<span class=\"token punctuation\">:</span> <span class=\"token constant\">ADD_AND_ENTER_MODULE</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\tblock<span class=\"token punctuation\">:</span> refModule<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\tmodule<span class=\"token punctuation\">:</span> refModule<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\tchunk<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\tchunkGroup\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\t\t<span class=\"token comment\">// Traverse all Blocks</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 再处理异步依赖module 到前面的 iteratorBlock 方法</span>\n\t\t\t\t\t\t<span class=\"token function\">iterationOfArrayCallback</span><span class=\"token punctuation\">(</span>blockInfo<span class=\"token punctuation\">.</span>blocks<span class=\"token punctuation\">,</span> iteratorBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blockInfo<span class=\"token punctuation\">.</span>blocks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> module <span class=\"token operator\">!==</span> block<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\tblocksWithNestedBlocks<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">LEAVE_MODULE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 在出栈的时候带上 index2</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunkGroup <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> chunkGroup<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleIndex2</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\tchunkGroup<span class=\"token punctuation\">.</span><span class=\"token function\">setModuleIndex2</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\t\t\t\tmodule<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\tchunkGroupCounters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>chunkGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>index2<span class=\"token operator\">++</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>index2 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\tmodule<span class=\"token punctuation\">.</span>index2 <span class=\"token operator\">=</span> nextFreeModuleIndex2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 外层循环是为了遍历异步依赖的 module</span>\n\t\t\t<span class=\"token keyword\">const</span> tempQueue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">;</span>\n\t\t\tqueue <span class=\"token operator\">=</span> queueDelayed<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tqueueDelayed <span class=\"token operator\">=</span> tempQueue<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// PART TWO</span>\n\t\t<span class=\"token comment\">// PART2 主要是针对第一步生成chunk图做了一些优化处理，有兴趣可以自行阅读，chunk分离的结果对应了最终输出的文件夹下的不同chunk文件</span>\n\t\t<span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>还是回到第三个问题，现在我们把这个问题定位到了一个个的chunk当中，那么chunk中的代码是怎么和你平时写的那些代码对应起来的呢，可能你读到这里已经有了答案，不过，还有一些细节性的问题可以仔细的研究一下。接着来看seal方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processDependenciesBlocksForChunkGroups</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chunkGroups<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>optimizeTree<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">...</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createModuleAssets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取到 module 下的 assets，比如图片之类的</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">shouldGenerateChunkAssets</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">beforeChunkAssets</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createChunkAssets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 套用不同模板针对chunk下的 files 生成整个chunk的source代码，主要是生成 chunk.files</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">additionalChunkAssets</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">summarizeDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>additionalAssets<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 很多插件会对 chunk.files 做最终处理的钩子</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>optimizeChunkAssets<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token comment\">// 内置的 sourcemap-dev-plugin</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">afterOptimizeChunkAssets</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>optimizeAssets<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">afterOptimizeAssets</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">needAdditionalSeal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unseal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token comment\">// 整个打chunk的流程走完</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterSeal<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到这里整个webpack打包的主流程走完，接下来会将打好的包输出到目标文件目录下，现在回到Compiler.js中</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onCompiled</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> compilation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">shouldEmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stats</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tstats<span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">=</span> startTime<span class=\"token punctuation\">;</span>\n\t\t\t\tstats<span class=\"token punctuation\">.</span>endTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> stvats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// 此处输出文件到文件目录</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emitAssets</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">needAdditionalPass</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tcompilation<span class=\"token punctuation\">.</span>needAdditionalPass <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t<span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stats</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tstats<span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">=</span> startTime<span class=\"token punctuation\">;</span>\n\t\t\t\t\tstats<span class=\"token punctuation\">.</span>endTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>additionalPass<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>onCompiled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emitRecords</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t<span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stats</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tstats<span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">=</span> startTime<span class=\"token punctuation\">;</span>\n\t\t\t\t\tstats<span class=\"token punctuation\">.</span>endTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> stats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这基本上是回答了第三个问题，打包出的文件按不同chunk输出文件，chunk中的module按引用顺序深度排列，具体写法依赖与模板套用的语法。</p>\n<h2>总结</h2>\n<p>到这里为止，我们基本梳理了一遍webpack的主流程，从入口到最后打包成文件。Compilation作为一条主线贯穿了整个webpack的生命周期之中，若要细抠每个流程的细节可以从Compilation中属性入手，了解每个属性的作用及在各个生命周期中的状态。Tapable给予了webpack强大的可配置性，结合Compilation可以发现，这是一个生产单一对象的过程，面向过程webpack通过Tapable开了多个不同的切面，切面可能具有自己游离的对象，贯穿于Compilation不同的生命周期之中，最终都是为了能够赋予chunks独特的特性。有了这条主线之后，无论对于之后开发webpack的插件，还是继续深挖webpack源码都具有指导意义。</p>","frontmatter":{"date":"May 30, 2019","path":"/webpack-note","title":"Webpack (v4.31.0) 源码阅读笔记"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}